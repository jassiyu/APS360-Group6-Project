#################### import train data and validation ###################
import random
# File handling
import os
import zipfile
import subprocess
# Data processing
import pandas as pd
import numpy as np

# Image processing
from PIL import Image

from torchvision import datasets, transforms

# PyTorch utilities
import torch
from torch.utils.data import DataLoader, Dataset, Subset

# Visualization
import matplotlib.pyplot as plt

import zipfile
import os





train_transform = transforms.Compose([
     transforms.Resize((32, 32)),  # Resize images to 32x32
    # transforms.RandomHorizontalFlip(),  # Data augmentation
     transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # Normalize images
     transforms.RandomHorizontalFlip(p=0.5),
     transforms.RandomVerticalFlip(p=0.5),
     transforms.RandomRotation(25)
     #transforms.ColorJitter(brightness=0.05, contrast=0.05, saturation=0.05, hue=0.05)
])



# Define transformations for validation data
val_transform = transforms.Compose([
     transforms.Resize((32, 32)),  # Resize images to 32x32
     transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # Normalize images
])

# Set the path to the dataset
data_dir = '/workspaces/APS360-Group6-Project/dataset'

# Load the training dataset
train_dataset = datasets.ImageFolder(os.path.join(data_dir, 'truncated_train'), transform=train_transform)

# Load the validation dataset
val_dataset = datasets.ImageFolder(os.path.join(data_dir, 'truncated_val'), transform=val_transform)

# Number of samples in the training and validation datasets
print(f'Number of training samples: {len(train_dataset)}')
print(f'Number of validation samples: {len(val_dataset)}')


batch_size = 32
# Create data loaders for training and validation datasets
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=True)


########training set sanity check############
def show_loader_samples(loader, num_batches=1):
    for i, (images, labels) in enumerate(loader):
        print(f'Batch {i+1}:')
        print(f' - Images shape: {images.shape}')
        print(f' - Labels shape: {labels.shape}')
        if i+1 == num_batches:
            break

# Display information for 1 batch from the training and validation loaders
print("Sample training batch:")
show_loader_samples(train_loader)

print("Sample validation batch:")
show_loader_samples(val_loader)

# print("Sample test batch:")
# show_loader_samples(test_loader)