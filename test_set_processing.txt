from google.colab import drive
drive.mount('/content/drive')
# Google Colab utilities
from google.colab import drive, files
import random
# File handling
import os
import zipfile
# Data processing
import pandas as pd
import numpy as np
# Image processing
from PIL import Image
from torchvision import datasets, transforms
# PyTorch utilities
import torch
from torch.utils.data import DataLoader, Dataset, Subset
# Visualization
import matplotlib.pyplot as plt
#!unzip /content/drive/MyDrive/Colab_Notebooks/Project/zip_Dataset/Test.zip -d /content/drive/MyDrive/Colab_Notebooks/Project/dataset
#!unzip /content/drive/MyDrive/Colab_Notebooks/Project/zip_Dataset/truncated_train.zip -d /content/drive/MyDrive/Colab_Notebooks/Project/dataset
#!unzip /content/drive/MyDrive/Colab_Notebooks/Project/zip_Dataset/truncated_val.zip -d /content/drive/MyDrive/Colab_Notebooks/Project/dataset
from PIL import Image
# Manually load an image to test if there's an issue with the PIL library
test_image_path = '/content/drive/MyDrive/Colab_Notebooks/Project/dataset/Test/00000.png'  # Replace with a valid image path
try:
    image = Image.open(test_image_path)
    print("Successfully loaded the image manually!")
except IOError as e:
    print(f"Error loading image: {e}")
############# import test data set ####################
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
from PIL import Image
import pandas as pd
import os
# Label mapping for GTSRB dataset
label_mapping = {
    0: "Speed limit (20km/h)",
    1: "Speed limit (30km/h)",
    2: "Speed limit (50km/h)",
    3: "Speed limit (60km/h)",
    4: "Speed limit (70km/h)",
    5: "Speed limit (80km/h)",
    6: "End of speed limit (80km/h)",
    7: "Speed limit (100km/h)",
    8: "Speed limit (120km/h)",
    9: "No passing",
    10: "No passing for vehicles over 3.5 metric tons",
    11: "Right-of-way at the next intersection",
    12: "Priority road",
    13: "Yield",
    14: "Stop",
    15: "No vehicles",
    16: "Vehicles over 3.5 metric tons prohibited",
    17: "No entry",
    18: "General caution",
    19: "Dangerous curve to the left",
    20: "Dangerous curve to the right",
    21: "Double curve",
    22: "Bumpy road",
    23: "Slippery road",
    24: "Road narrows on the right",
    25: "Road work",
    26: "Traffic signals",
    27: "Pedestrians",
    28: "Children crossing",
    29: "Bicycles crossing",
    30: "Beware of ice/snow",
    31: "Wild animals crossing",
    32: "End of all speed and passing limits",
    33: "Turn right ahead",
    34: "Turn left ahead",
    35: "Ahead only",
    36: "Go straight or right",
    37: "Go straight or left",
    38: "Keep right",
    39: "Keep left",
    40: "Roundabout mandatory",
    41: "End of no passing",
    42: "End of no passing by vehicles over 3.5 metric tons"
}
# Dataset class
class GTSRBTestDataset(Dataset):
    def __init__(self, csv_file, root_dir, transform=None, use_label_names=False, label_mapping=None):
        self.data = pd.read_csv(csv_file)  # Load CSV file
        self.root_dir = root_dir  # Root directory where images are stored
        self.transform = transform
        self.use_label_names = use_label_names  # Flag to use label names
        self.label_mapping = label_mapping  # Label mapping dictionary
    def __len__(self):
        return len(self.data)
    def __getitem__(self, idx):
        # Get image path
        img_name = os.path.join(self.root_dir, self.data.iloc[idx, 7].strip())
        #print(f"Loading image: {img_name}")
        image = Image.open(img_name)
        # Get the numerical label
        label = int(self.data.iloc[idx, 6])
        # If requested, use the label name instead of the numerical label
        if self.use_label_names and self.label_mapping:
            label = self.label_mapping.get(label, "Unknown")
        # Apply transformations if provided
        if self.transform:
            image = self.transform(image)
        return image, label
# Define transformations
transform = transforms.Compose([
    transforms.Resize((32, 32)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])
# Load the dataset with label names
test_dataset = GTSRBTestDataset(
    csv_file='/content/drive/MyDrive/Colab_Notebooks/Project/dataset/Test.csv',
    root_dir='/content/drive/MyDrive/Colab_Notebooks/Project/dataset',
    transform=transform,
    #use_label_names=True,  # Enable label name usage
    label_mapping=label_mapping  # Pass the label mapping dictionary
)
# Randomly sample a subset of 500 images
num_samples = 1290
indices = list(range(len(test_dataset)))
random_sampled_indices = random.sample(indices, num_samples)
test_subset = Subset(test_dataset, random_sampled_indices)
# Create DataLoader for the subset
test_loader = DataLoader(dataset=test_subset, batch_size=32, shuffle=True)
print(f'Number of test samples: {len(test_subset)}')